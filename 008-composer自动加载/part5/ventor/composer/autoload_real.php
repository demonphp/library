<?php

// autoload_real.php @generated by Composer

class ComposerAutoloaderInit3fad121e90f8af74c48b29a6c0304c6c
{
    private static $loader;

    public static function loadClassLoader($class)
    {
        if ('Composer\Autoload\ClassLoader' === $class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }

    /**
     * @desc  1.找 Composer\ClassLoader 如果不存在就是生成一个实例放在 ComposerAutoloaderInit64c47026c93126586e44d036738c0862 中
     *        2.然后将 composer cli 生成的各种 autoload_psr4, autoload_classmap, autoload_namespaces(psr-0) 全都注册到 Composer\ClassLoader 中。
     *        3.直接 require 所有在 autoload_files 中的文件
     *
     * @return \Composer\Autoload\ClassLoader
     */
    public static function getLoader()
    {
        //1.如果自身的实例存在,则返回
        if (null !== self::$loader) {
            return self::$loader;
        }

        //2第二个参数,是否,抛常,第三个参数,加入队列之首
        spl_autoload_register(array('ComposerAutoloaderInit3fad121e90f8af74c48b29a6c0304c6c', 'loadClassLoader'), true, true);
        //3.new 类
        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
        //4.注册完马上就不注册?
        spl_autoload_unregister(array('ComposerAutoloaderInit3fad121e90f8af74c48b29a6c0304c6c', 'loadClassLoader'));

        //5.是否没有定义HHVM_VERSION并且当前php版本>5.6(5.6.30 == 50630)
        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION');
        if ($useStaticLoader) {
            //6.如果是引入autoload文件
            require_once __DIR__ . '/autoload_static.php';

            call_user_func(\Composer\Autoload\ComposerStaticInit3fad121e90f8af74c48b29a6c0304c6c::getInitializer($loader));
        } else {
            //6.如果不存在,然后将 composer cli 生成的各种 autoload_psr4, autoload_classmap, autoload_namespaces(psr-0) 全都注册到 Composer\ClassLoader 中。
            $map = require __DIR__ . '/autoload_namespaces.php';
            foreach ($map as $namespace => $path) {
                $loader->set($namespace, $path);
            }

            $map = require __DIR__ . '/autoload_psr4.php';
            foreach ($map as $namespace => $path) {
                $loader->setPsr4($namespace, $path);
            }

            $classMap = require __DIR__ . '/autoload_classmap.php';
            if ($classMap) {
                $loader->addClassMap($classMap);
            }
        }

        //7.注册
        $loader->register(true);

        //8.定义要加载的文件
        if ($useStaticLoader) {
            $includeFiles = Composer\Autoload\ComposerStaticInit3fad121e90f8af74c48b29a6c0304c6c::$files;
        } else {
            $includeFiles = require __DIR__ . '/autoload_files.php';
        }

        //9.依次引入需要的php文件
        foreach ($includeFiles as $fileIdentifier => $file) {
            composerRequire3fad121e90f8af74c48b29a6c0304c6c($fileIdentifier, $file);
        }

        //10.返回loader
        return $loader;
    }
}

function composerRequire3fad121e90f8af74c48b29a6c0304c6c($fileIdentifier, $file)
{
    if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
        require $file;

        $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;
    }
}
